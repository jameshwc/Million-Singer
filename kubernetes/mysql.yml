apiVersion: v1
kind: Service
metadata:
  name: million-singer-sql
  labels:
    app: million-singer
spec:
  ports:
    - port: 3306
      name: sql
  selector:
    app: million-singer
    type: sql 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: million-singer-sql
  labels:
    app: million-singer
    type: sql

spec:
  # replicas: 3
  selector:
    matchLabels:
      app: million-singer
      type: sql
  # serviceName: "million-singer-sql"
  template:
    metadata:
      labels:
        app: million-singer
        type: sql
    spec:
      volumes:
        - name: million-singer-sql-data
          persistentVolumeClaim:
            claimName: million-singer-storage
        - name: million-singer-init-sql
          configMap:
            name: million-singer-init-sql
        - name: config
          configMap:
            name: million-singer-sql-config
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
          - containerPort: 3306
            name: "mysql"
        volumeMounts:
          - mountPath: /var/lib/mysql
            name: million-singer-sql-data
          - mountPath: /docker-entrypoint-initdb.d
            name: million-singer-init-sql
          - mountPath: /etc/mysql/my.cnf
            name: config
            subPath: my.cnf
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: database # TODO: keep it secure
        args: [
            "--init-file=/docker-entrypoint-initdb.d/initdb.sql",
            "--default-authentication-plugin=mysql_native_password",
            "--character-set-server=utf8mb4",
            "--collation-server=utf8mb4_general_ci",
            "--explicit_defaults_for_timestamp=true",
            "--lower_case_table_names=1",
            "--max_allowed_packet=128M",
        ]
